package io.github.mihaildemidoff.reactive.tg.bots.model.methods.chat.invitelink;


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.mihaildemidoff.reactive.tg.bots.model.common.GenericBotApiResponse;
import io.github.mihaildemidoff.reactive.tg.bots.model.common.methoddefinition.BaseBotMethodDefinition;
import io.github.mihaildemidoff.reactive.tg.bots.model.common.methoddefinition.BotMethod;
import jakarta.validation.constraints.NotNull;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import lombok.experimental.SuperBuilder;
import lombok.extern.jackson.Jacksonized;

/**
 * Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked.
 * The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.
 * Returns the new invite link as String on success.
 *
 * <b>Note:</b> Each administrator in a chat generates their own invite links. Bots can't use invite links generated by
 * other administrators. If you want your bot to work with invite links, it will need to generate its own link using
 * exportChatInviteLink or by calling the getChat method. If your bot needs to generate a new primary invite link
 * replacing its previous one, use exportChatInviteLink again.
 *
 * @see <a href="https://core.telegram.org/bots/api#exportchatinvitelink">exportChatInviteLink</a>
 */
@SuperBuilder(toBuilder = true)
@Jacksonized
@Getter
@ToString
@EqualsAndHashCode
@JsonIgnoreProperties(ignoreUnknown = true)
public class ExportChatInviteLinkMethod implements BaseBotMethodDefinition<String> {

    /**
     * Unique identifier for the target group or username of the target supergroup or channel (in the
     * format @channelusername)
     */
    @NotNull
    @JsonProperty("chat_id")
    private final String chatId;

    @Override
    public TypeReference<GenericBotApiResponse<String>> getResponseClass() {
        return new TypeReference<>() {
        };
    }

    @Override
    public BotMethod getMethod() {
        return BotMethod.EXPORT_CHAT_INVITE_LINK;
    }
}
